
/* Paintings */

    retrieveAllPaintings(page, limit) {
        return axios.get(`${API_URL}/paintings?page=${page}&limit=${limit}`);
    }

    retrievePainting(id) {
        return axios.get(`${API_URL}/paintings/${id}`);
    }

    createPainting(painting) {
        return axios.post(`${API_URL}/paintings`, painting);
    }

    updatePainting(painting) {
        return axios.put(`${API_URL}/paintings/${painting.id}`, painting);
    }

    deletePaintings(paintings) {
        return axios.post(`${API_URL}/deletepaintings`, paintings);
    }

/* Museums */

    retrieveAllMuseums(page, limit) {
        return axios.get(`${API_URL}/artists?page=${page}&limit=${limit}`);
    }

    retrieveMuseum(id) {
        return axios.get(`${API_URL}/museums/${id}`);
    }

    createMuseum(museum) {
        return axios.post(`${API_URL}/museums`, museum);
    }

    updateMuseum(museum) {
        return axios.put(`${API_URL}/museums/${museum.id}`, museum);
    }

    deleteMuseums(museums) {
        return axios.post(`${API_URL}/deletemuseums`, museums);
    }
/* Users */

    retrieveAllUsers(page, limit) {
        return axios.get(`${API_URL}/users?page=${page}&limit=${limit}`);
    }

    retrieveUser(id) {
        return axios.get(`${API_URL}/users/${id}`);
    }

    createUser(user) {
        return axios.post(`${API_URL}/users`, user);
    }

    updateUser(user) {
        return axios.put(`${API_URL}/users/${painting.id}`, user);
    }

    deleteUsers(users) {
        return axios.post(`${API_URL}/deleteusers`, users);
    }
    /* Museums */
    @CrossOrigin(origins = "http://localhost:3000")
    @RestController
    @RequestMapping("/api/v1")
    public class MuseumController {
        @Autowired
        MuseumRepository museumRepository;

        @GetMapping("/museums")
        public Page getAllMuseums(@RequestParam("page") int page, @RequestParam("limit") int limit) {
            return museumRepository.findAll(PageRequest.of(page, limit, Sort.by(Sort.Direction.ASC, "name")));
        }

        @GetMapping("/museums/{id}")
        public ResponseEntity getMuseum(@PathVariable(value = "id") Long museumId)
                throws DataValidationException
        {
            Museum museum = museumRepository.findById(museumID)
                    .orElseThrow(()-> new DataValidationException("Художник с таким индексом не найден"));
            return ResponseEntity.ok(artist);
        }

        @PostMapping("/deletemuseums")
        public ResponseEntity deleteMuseums(@Valid @RequestBody List museums) {
            museumRepository.deleteAll(museums);
            return new ResponseEntity(HttpStatus.OK);
        }
